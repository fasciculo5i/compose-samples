/*
 * Copyright 2019 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.example.crane.buildsrc.Libs
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

// Reads the Google maps key that is used in the AndroidManifest
Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "androidx.compose.samples.crane"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [ googleMapsKey : properties.getProperty("google.maps.key", "") ]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerVersion Libs.AndroidX.Compose.kotlinCompilerVersion
        kotlinCompilerExtensionVersion Libs.AndroidX.Compose.version
    }
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors
        allWarningsAsErrors = true

        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xallow-jvm-ir-dependencies", "-Xskip-prerelease-check"]
    }
}

configurations {
    ktlint
}

dependencies {
    implementation Libs.Kotlin.stdlib
    implementation Libs.googleMaps

    implementation Libs.AndroidX.Compose.runtime
    implementation Libs.AndroidX.Compose.foundation
    implementation Libs.AndroidX.Compose.material
    implementation Libs.AndroidX.Compose.layout
    implementation Libs.AndroidX.Compose.animation
    implementation Libs.AndroidX.UI.tooling

    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.Lifecycle.viewModelKtx
    implementation Libs.AndroidX.activityKtx
    implementation Libs.AndroidX.Lifecycle.extensions

    implementation Libs.picasso

    ktlint Libs.ktLint
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    // Ignoring paren-spacing as it flags a composable type param as an error
    args "-F", "src/**/*.kt", "--disabled_rules", "paren-spacing"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    // Ignoring paren-spacing as it flags a composable type param as an error
    args "-F", "src/**/*.kt", "--disabled_rules", "paren-spacing"
}